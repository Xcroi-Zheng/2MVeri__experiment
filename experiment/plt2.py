import matplotlib.pyplot as plt
import numpy as np

# 这两行代码使得 pyplot 画出的图形中可以显示中文
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

fig1, (ax1, ax2, ax3) = plt.subplots(figsize=(15, 6), nrows=1, ncols=3, sharex=True)
x = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]


y1 = np.array([1702901491.364449706, 1702901645.279465674, 1702901697.833658782, 1702904342.254094762, 1702902219.284447653, 1702902341.301792857, 1702902438.172225009, 1702902501.524062579, 1702902603.846648933, 1702902726.665613003])
y2 = np.array([1702901491.394787, 1702901645.4583097, 1702901698.1193538, 1702904342.584906, 1702902219.5505903, 1702902341.610501, 1702902438.6078446, 1702902502.1303658, 1702902604.7176607, 1702902727.548431])
y3 = np.array([1702902858.491229710, 1702902990.401604167, 1702903032.887948585, 1702903117.602036641, 1702903178.003296491, 1702903251.469605338, 1702903426.355601757, 1702903492.471875988, 1702903569.221864743, 1702903778.383267603]) 
y4 = np.array([1702902858.5086815, 1702902990.4716847, 1702903033.026075, 1702903117.8818853, 1702903178.4041118, 1702903251.9187443, 1702903426.8134704, 1702903493.1366978, 1702903570.1257765, 1702903779.36173])

y1 = (y2 - y1)*1000
y2 = (y4 - y3)*1000

ax1.plot(x, y1, label='P4Consist')
ax1.plot(x, y2, label='P4Prime')
ax1.set_xlabel('Detection Cycle(s)') 
ax1.set_ylabel('Detection Times(ms)') 
ax1.set_title('Bug Number: 1')
ax1.legend()

y1 = np.array([1702907181.585856954, 1702907258.247537418, 1702907339.291346903, 1702907442.223537268, 1702907505.292224886, 1702907650.286880800, 1702907784.401879791, 1702907550.287272074, 1702907954.839398800, 1702907838.773200366])
y2 = np.array([1702907182.0924492, 1702907258.8721316, 1702907340.0288923, 1702907443.015303, 1702907506.3308895, 1702907651.3465095, 1702907785.5399313, 1702907551.5276082, 1702907956.09744, 1702907840.0671241])
y3 = np.array([1702908165.633856281, 1702908119.127851223, 1702908210.999740637, 1702908259.784866783, 1702908407.399238705, 1702908507.335591349, 1702908305.619565583, 1702908710.511458208, 1702908559.776545323, 1702908769.858975700]) 
y4 = np.array([1702908166.1377275, 1702908119.6843915, 1702908211.77104, 1702908260.6623008, 1702908408.2870185, 1702908508.2702787, 1702908306.5875638, 1702908711.7277582, 1702908561.057881,  1702908771.272179])

y1 = (y2 - y1)*1000
y2 = (y4 - y3)*1000

ax2.plot(x, y1, label='P4Consist')
ax2.plot(x, y2, label='P4Prime')
ax2.set_xlabel('Detection Cycle(s)') 
ax2.set_ylabel('Detection Times(ms)') 
ax2.set_title('Bug Number: 5')
ax2.legend()

y1 = np.array([1702910351.996631804, 1702910458.338333570, 1702910514.759401578, 1702910566.850529930, 1702910634.733338257, 1702910771.958065460, 1702910923.486113776, 1702910860.422886095, 1702911045.988226849, 1702910719.413841271])
y2 = np.array([1702910352.5439794, 1702910459.1383026, 1702910515.7236152, 1702910567.9219944, 1702910635.7584605, 1702910773.30009, 1702910924.8817155, 1702910861.939122, 1702911047.5889618, 1702910721.3279672])
y3 = np.array([1702911131.833981979, 1702911200.048009058, 1702911248.870584854, 1702911327.831095846, 1702911389.749185906, 1702911446.995661213, 1702911504.007688360, 1702911567.768668016, 1702911628.480764038, 1702911690.642791084]) 
y4 = np.array([1702911132.490781, 1702911200.9332938, 1702911249.7594557, 1702911328.7367349, 1702911390.9305034, 1702911448.1632423, 1702911505.3501995, 1702911569.2662847, 1702911630.0430367, 1702911692.6445968])

y1 = (y2 - y1)*1000
y2 = (y4 - y3)*1000

ax3.plot(x, y1, label='P4Consist')
ax3.plot(x, y2, label='P4Prime')
ax3.set_xlabel('Detection Cycle(s)') 
ax3.set_ylabel('Detection Times(ms)') 
ax3.set_title('Bug Number: 7')
ax3.legend()

plt.tight_layout()
plt.legend() 
plt.show()


# sends1 = int(1000 / 34)
# sends2 = int(7000 / 37)

# y1 = [5820, 3100, 2160, 1640, 1320, 1100, 940, 840, 740, 640]
# y1 = [t/34 for t in y1]
# plt.plot(x, y1, label='P4Consist-' + str(sends1) + 'pkt/s')

# y2 = [1180, 636, 444, 332, 268, 220, 196, 172, 148, 136]
# y2 = [t/34 for t in y2]
# plt.plot(x, y2, label='P4Prime-' + str(sends1) + 'pkt/s')

# y3 = [36548, 20128, 15364, 11628, 9080, 7240, 6448, 5788, 4864, 4356]
# y3 = [t/37 for t in y3]
# plt.plot(x, y3, label='P4Consist-' + str(sends2) + 'pkt/s')

# y4 = [7660, 4336, 3180, 2260, 1964, 1600, 1364, 1144, 976, 876]
# y4 = [t/37 for t in y4]
# plt.plot(x, y4, label='P4Prime-' + str(sends2) + 'pkt/s')


# plt.xlabel('Detection Cycle(s)') #设置x轴名称 x label
# plt.ylabel('Check Overhead(Bps)') #设置y轴名称 y label
# # plt.title('Consistency check overhead of P4Prime and P4Consist \n under different verification cycles in fat tree with k=4') #设置图名为Simple Plot
# plt.legend() #自动检测要在图例中显示的元素，并且显示

# plt.show() #图形可视化
